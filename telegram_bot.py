import os
import asyncio
import logging
import time
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import httpx

load_dotenv()

# Token —ñ–∑ .env
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
API_URL = "http://localhost:8000/run"

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –ö–µ—à –¥–ª—è –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞–Ω–Ω—è —Ç–∏–ø—ñ–≤ –∑–∞–ø–∏—Ç—ñ–≤ (–¥–ª—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏)
request_stats = {"total": 0, "by_intent": {}}

# –ï–º–æ–¥–∑—ñ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
INTENT_EMOJIS = {
    "analyze_news": "üìä",
    "get_price": "üí∞", 
    "investment_advice": "üìà",
    "general_chat": "üí¨",
    "fallback": "‚ùì"
}


# –ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /start"""
    welcome_text = """ü§ñ **–í—ñ—Ç–∞—é! –Ø MarketAnalyst Agent**

–ú–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑:
üìä –ê–Ω–∞–ª—ñ–∑–æ–º —Ä–∏–Ω–∫–æ–≤–∏—Ö –Ω–æ–≤–∏–Ω
üí∞ –¶—ñ–Ω–∞–º–∏ –∞–∫—Ü—ñ–π —Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
üìà –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω–∏–º–∏ –ø–æ—Ä–∞–¥–∞–º–∏

**–ü—Ä–∏–∫–ª–∞–¥–∏ –∑–∞–ø–∏—Ç—ñ–≤:**
‚Ä¢ "–©–æ —Ç–∞–º –Ω–∞ —Ä–∏–Ω–∫—É?"
‚Ä¢ "–¶—ñ–Ω–∞ Apple"
‚Ä¢ "–ö—É–¥–∏ –≤–∫–ª–∞–¥–∞—Ç–∏ –≥—Ä–æ—à—ñ?"
‚Ä¢ "–°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—î Bitcoin?"

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –∑–∞–ø–∏—Ç!

/help - –¥–æ–ø–æ–º–æ–≥–∞
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    
    await message.answer(welcome_text, parse_mode="Markdown")


@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /help"""
    help_text = """‚ÑπÔ∏è **–î–æ–≤—ñ–¥–∫–∞ MarketAnalyst Agent**

**–¢–∏–ø–∏ –∑–∞–ø–∏—Ç—ñ–≤:**
üìä **–ê–Ω–∞–ª—ñ–∑ –Ω–æ–≤–∏–Ω:** "—Ä–∏–Ω–æ–∫", "–Ω–æ–≤–∏–Ω–∏", "—Å–∏—Ç—É–∞—Ü—ñ—è"
üí∞ **–¶—ñ–Ω–∏:** "—Ü—ñ–Ω–∞ Apple", "—Å–∫—ñ–ª—å–∫–∏ TSLA", "Bitcoin"
üìà **–ü–æ—Ä–∞–¥–∏:** "–∫—É–¥–∏ –≤–∫–ª–∞–¥–∞—Ç–∏", "—â–æ –∫—É–ø–∏—Ç–∏", "—ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó"
üí¨ **–°–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è:** "–ø—Ä–∏–≤—ñ—Ç", "–¥—è–∫—É—é", "—è–∫ —Å–ø—Ä–∞–≤–∏"

**–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ –∞–∫—Ç–∏–≤–∏:**
‚Ä¢ –ê–∫—Ü—ñ—ó: AAPL, TSLA, GOOGL, MSFT, AMZN, META...
‚Ä¢ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏: Bitcoin, Ethereum...
‚Ä¢ –ú–æ–∂–Ω–∞ –ø–∏—Å–∞—Ç–∏ —è–∫ —Ç–∏–∫–µ—Ä–∞–º–∏, —Ç–∞–∫ —ñ –Ω–∞–∑–≤–∞–º–∏

**–ö–æ–º–∞–Ω–¥–∏:**
/start - –ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É
/help - —Ü—è –¥–æ–≤—ñ–¥–∫–∞
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤"""
    
    await message.answer(help_text, parse_mode="Markdown")


@dp.message(Command("stats"))
async def cmd_stats(message: types.Message):
    """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è"""
    if request_stats["total"] == 0:
        await message.answer("üìä –ü–æ–∫–∏ —â–æ –∑–∞–ø–∏—Ç—ñ–≤ –Ω–µ –±—É–ª–æ.")
        return
    
    stats_text = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤:**\n\n"
    stats_text += f"–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å: {request_stats['total']}\n\n"
    
    if request_stats["by_intent"]:
        stats_text += "**–ü–æ —Ç–∏–ø–∞—Ö:**\n"
        for intent, count in request_stats["by_intent"].items():
            emoji = INTENT_EMOJIS.get(intent, "‚ùì")
            percentage = (count / request_stats["total"]) * 100
            stats_text += f"{emoji} {intent}: {count} ({percentage:.1f}%)\n"
    
    await message.answer(stats_text, parse_mode="Markdown")


@dp.message()
async def handle_message(message: types.Message):
    """–û–±—Ä–æ–±–ª—è—î –∑–≤–∏—á–∞–π–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user_input = message.text.strip()
    start_time = time.time()
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏
    processing_msg = await message.answer("üîç –ê–Ω–∞–ª—ñ–∑—É—é –∑–∞–ø–∏—Ç...")

    payload = {
        "messages": [
            {"role": "user", "content": user_input}
        ]
    }

    try:
        async with httpx.AsyncClient(timeout=60.0) as client:
            response = await client.post(API_URL, json=payload)
            response.raise_for_status()
            result = response.json()
            content = result["message"]["content"]

        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–±—Ä–æ–±–∫—É
        await processing_msg.delete()
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        request_stats["total"] += 1
        
        # –†–æ–∑–±–∏–≤–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å, —è–∫—â–æ –≤–æ–Ω–∞ –Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞
        max_length = 4096
        if len(content) <= max_length:
            await message.answer(content, parse_mode="Markdown")
        else:
            # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
            parts = []
            current_part = ""
            
            for line in content.split('\n'):
                if len(current_part + line + '\n') > max_length:
                    if current_part:
                        parts.append(current_part)
                        current_part = line + '\n'
                    else:
                        # –Ø–∫—â–æ –æ–¥–∏–Ω —Ä—è–¥–æ–∫ –¥–æ–≤—à–∏–π –∑–∞ –ª—ñ–º—ñ—Ç
                        parts.append(line[:max_length])
                        current_part = line[max_length:] + '\n'
                else:
                    current_part += line + '\n'
            
            if current_part:
                parts.append(current_part)
            
            for i, part in enumerate(parts):
                if i == 0:
                    await message.answer(part, parse_mode="Markdown")
                else:
                    await message.answer(f"üìÑ **–ß–∞—Å—Ç–∏–Ω–∞ {i+1}:**\n\n{part}", parse_mode="Markdown")

        # –õ–æ–≥—É–≤–∞–Ω–Ω—è —á–∞—Å—É –æ–±—Ä–æ–±–∫–∏
        processing_time = time.time() - start_time
        logging.info(f"‚úÖ –ó–∞–ø–∏—Ç –æ–±—Ä–æ–±–ª–µ–Ω–æ –∑–∞ {processing_time:.2f}—Å: {user_input[:50]}...")

    except httpx.TimeoutException:
        await processing_msg.edit_text("‚è∞ –ó–∞–ø–∏—Ç –∑–∞–π–º–∞—î –±—ñ–ª—å—à–µ —á–∞—Å—É, –Ω—ñ–∂ –æ—á—ñ–∫—É–≤–∞–ª–æ—Å—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        logging.warning("‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Ç—É")
        
    except httpx.HTTPStatusError as e:
        await processing_msg.edit_text("‚ùå –°–µ—Ä–≤–µ—Ä —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        logging.error(f"‚ùå HTTP –ø–æ–º–∏–ª–∫–∞: {e.response.status_code}")
        
    except Exception as e:
        await processing_msg.edit_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É.")
        logging.exception("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:")
        logging.error(f"–ó–∞–ø–∏—Ç: {user_input}")
        logging.error(f"–ü–æ–º–∏–ª–∫–∞: {str(e)}")


async def main():
    print("üöÄ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
