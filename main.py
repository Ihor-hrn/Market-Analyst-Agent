"""
MarketAnalystAgent - GenAI –∞–≥–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ä–∏–Ω–∫–æ–≤–æ—ó —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ
"""
import asyncio
import json
import os
from typing import List, Dict, Any
from datetime import datetime

import httpx
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from dotenv import load_dotenv

from tools import analyze_multiple_news

load_dotenv()

app = FastAPI(
    title="Market Analyst Agent",
    description="GenAI –∞–≥–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ä–∏–Ω–∫–æ–≤–æ—ó —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–æ–≤–∏–Ω",
    version="1.0.0"
)

# Pydantic –º–æ–¥–µ–ª—ñ –¥–ª—è API
class Message(BaseModel):
    role: str
    content: str

class ChatRequest(BaseModel):
    messages: List[Message]

class ChatResponse(BaseModel):
    message: Message

class NewsItem(BaseModel):
    title: str
    description: str
    source: str
    published_at: str

# –ö–µ—à –¥–ª—è –Ω–æ–≤–∏–Ω (–ø—Ä–æ—Å—Ç–∏–π –≤ –ø–∞–º'—è—Ç—ñ –∫–µ—à)
news_cache = {"data": [], "timestamp": None}
CACHE_DURATION = 300  # 5 —Ö–≤–∏–ª–∏–Ω


async def fetch_newsdata_io_news() -> List[Dict]:
    """–û—Ç—Ä–∏–º—É—î –Ω–æ–≤–∏–Ω–∏ –∑ NewsData.io API"""
    api_key = os.getenv("NEWSDATA_API_KEY")
    if not api_key:
        return []
    
    url = "https://newsdata.io/api/1/news"
    params = {
        "apikey": api_key,
        "category": "business,top",
        "language": "en",
        "size": "3"
    }
    
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.get(url, params=params)
            response.raise_for_status()
            data = response.json()
            
            news_items = []
            for article in data.get("results", [])[:3]:
                if article.get("title") and article.get("description"):
                    news_items.append({
                        "title": article["title"],
                        "description": article["description"],
                        "source": "NewsData.io",
                        "published_at": article.get("pubDate", ""),
                        "full_text": f"{article['title']}. {article['description']}"
                    })
            return news_items
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω –∑ NewsData.io: {e}")
        return []


async def fetch_finage_news() -> List[Dict]:
    """–û—Ç—Ä–∏–º—É—î –Ω–æ–≤–∏–Ω–∏ –∑ Finage API"""
    api_key = os.getenv("FINAGE_API_KEY")
    if not api_key:
        return []
    
    url = "https://api.finage.co.uk/news/forex"
    params = {
        "apikey": api_key,
        "limit": "3"
    }
    
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.get(url, params=params)
            response.raise_for_status()
            data = response.json()
            
            news_items = []
            articles = data if isinstance(data, list) else data.get("news", [])
            
            for article in articles[:3]:
                if article.get("title"):
                    description = article.get("description", "") or article.get("summary", "")
                    news_items.append({
                        "title": article["title"],
                        "description": description,
                        "source": "Finage",
                        "published_at": article.get("date", ""),
                        "full_text": f"{article['title']}. {description}"
                    })
            return news_items
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω –∑ Finage: {e}")
        return []


@app.get("/news", response_model=List[NewsItem])
async def get_news():
    """
    –û—Ç—Ä–∏–º—É—î –æ—Å—Ç–∞–Ω–Ω—ñ 3 –µ–∫–æ–Ω–æ–º—ñ—á–Ω—ñ –Ω–æ–≤–∏–Ω–∏ –∑ —Ä—ñ–∑–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª
    """
    global news_cache
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
    current_time = datetime.now().timestamp()
    if (news_cache["timestamp"] and 
        current_time - news_cache["timestamp"] < CACHE_DURATION and 
        news_cache["data"]):
        return news_cache["data"]
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤–∏–Ω–∏ –∑ –æ–±–æ—Ö –¥–∂–µ—Ä–µ–ª –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
        newsdata_task = fetch_newsdata_io_news()
        finage_task = fetch_finage_news()
        
        newsdata_results, finage_results = await asyncio.gather(
            newsdata_task, finage_task, return_exceptions=True
        )
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        all_news = []
        
        if not isinstance(newsdata_results, Exception):
            all_news.extend(newsdata_results)
        
        if not isinstance(finage_results, Exception):
            all_news.extend(finage_results)
        
        # –û–±–º–µ–∂—É—î–º–æ –¥–æ 6 –Ω–æ–≤–∏–Ω —ñ —Å–æ—Ä—Ç—É—î–º–æ
        all_news = all_news[:6]
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à
        news_cache = {
            "data": all_news,
            "timestamp": current_time
        }
        
        return all_news
    
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω: {str(e)}")


@app.post("/run", response_model=ChatResponse)
async def run_agent(request: ChatRequest):
    """
    –û—Å–Ω–æ–≤–Ω–∏–π endpoint –∞–≥–µ–Ω—Ç–∞ - –∞–Ω–∞–ª—ñ–∑—É—î —Ä–∏–Ω–∫–æ–≤—ñ –Ω–æ–≤–∏–Ω–∏ —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –∑–≤—ñ—Ç
    """
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏
        news_items = await get_news()
        
        if not news_items:
            return ChatResponse(
                message=Message(
                    role="assistant",
                    content="–ù–∞ –∂–∞–ª—å, –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –Ω–æ–≤–∏–Ω–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É."
                )
            )
        
        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ç–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å –∫–æ–∂–Ω–æ—ó –Ω–æ–≤–∏–Ω–∏
        news_texts = [item["full_text"] for item in news_items]
        sentiment_results = await analyze_multiple_news(news_texts)
        
        # –§–æ—Ä–º—É—î–º–æ –∑–≤—ñ—Ç
        bullish_news = []
        bearish_news = []
        neutral_news = []
        
        for i, (news_item, sentiment) in enumerate(zip(news_items, sentiment_results)):
            news_summary = {
                "title": news_item["title"][:80] + "..." if len(news_item["title"]) > 80 else news_item["title"],
                "source": news_item["source"],
                "explanation": sentiment["explanation"],
                "confidence": sentiment.get("confidence", 0.0)
            }
            
            sentiment_type = sentiment["sentiment"].lower()
            if sentiment_type == "bullish":
                bullish_news.append(news_summary)
            elif sentiment_type == "bearish":
                bearish_news.append(news_summary)
            else:
                neutral_news.append(news_summary)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç
        report_parts = ["üîç **–ê–Ω–∞–ª—ñ–∑ —Ä–∏–Ω–∫–æ–≤–æ—ó —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ**\n"]
        
        if bullish_news:
            report_parts.append(f"üìà **BULLISH —Å–∏–≥–Ω–∞–ª–∏ ({len(bullish_news)}):**")
            for news in bullish_news:
                report_parts.append(f"‚Ä¢ {news['title']} ({news['source']})")
                report_parts.append(f"  ‚îî {news['explanation']}\n")
        
        if bearish_news:
            report_parts.append(f"üìâ **BEARISH —Å–∏–≥–Ω–∞–ª–∏ ({len(bearish_news)}):**")
            for news in bearish_news:
                report_parts.append(f"‚Ä¢ {news['title']} ({news['source']})")
                report_parts.append(f"  ‚îî {news['explanation']}\n")
        
        if neutral_news:
            report_parts.append(f"‚öñÔ∏è **NEUTRAL —Å–∏–≥–Ω–∞–ª–∏ ({len(neutral_news)}):**")
            for news in neutral_news:
                report_parts.append(f"‚Ä¢ {news['title']} ({news['source']})")
                report_parts.append(f"  ‚îî {news['explanation']}\n")
        
        # –ó–∞–≥–∞–ª—å–Ω–∏–π –≤–∏—Å–Ω–æ–≤–æ–∫
        total_news = len(news_items)
        report_parts.append("üìä **–ó–∞–≥–∞–ª—å–Ω–∏–π –≤–∏—Å–Ω–æ–≤–æ–∫:**")
        
        if len(bullish_news) > len(bearish_news):
            report_parts.append("–ü–µ—Ä–µ–≤–∞–∂–∞—é—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏ –¥–ª—è —Ä–∏–Ω–∫—É.")
        elif len(bearish_news) > len(bullish_news):
            report_parts.append("–ü–µ—Ä–µ–≤–∞–∂–∞—é—Ç—å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏ –¥–ª—è —Ä–∏–Ω–∫—É.")
        else:
            report_parts.append("–†–∏–Ω–∫–æ–≤—ñ —Å–∏–≥–Ω–∞–ª–∏ –∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω—ñ.")
        
        final_report = "\n".join(report_parts)
        
        return ChatResponse(
            message=Message(
                role="assistant",
                content=final_report
            )
        )
    
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É: {str(e)}")


@app.get("/")
async def root():
    """–ë–∞–∑–æ–≤–∏–π endpoint –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ API"""
    return {
        "name": "Market Analyst Agent",
        "version": "1.0.0",
        "description": "GenAI –∞–≥–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ä–∏–Ω–∫–æ–≤–æ—ó —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ",
        "endpoints": {
            "POST /run": "–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –∞–Ω–∞–ª—ñ–∑ —Ä–∏–Ω–∫—É",
            "GET /news": "–û—Ç—Ä–∏–º–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏",
            "GET /docs": "API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è"
        }
    }


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)