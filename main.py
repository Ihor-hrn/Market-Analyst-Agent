"""
MarketAnalystAgent - GenAI –∞–≥–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ä–∏–Ω–∫–æ–≤–æ—ó —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ
"""
import asyncio
import json
import os
from typing import List, Dict, Any
from datetime import datetime

import httpx
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from dotenv import load_dotenv

from tools import (
    analyze_multiple_news, analyze_intent, extract_ticker, get_price,
    detect_entity, plan_actions, execute_action_plan, get_news_targeted
)
from agent_tools import AVAILABLE_TOOLS
from langchain_openai import ChatOpenAI
from langchain.agents import AgentExecutor, create_openai_functions_agent
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder

load_dotenv()

app = FastAPI(
    title="Market Analyst Agent",
    description="GenAI –∞–≥–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ä–∏–Ω–∫–æ–≤–æ—ó —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–æ–≤–∏–Ω",
    version="1.0.0"
)

# Pydantic –º–æ–¥–µ–ª—ñ –¥–ª—è API
class Message(BaseModel):
    role: str
    content: str

class ChatRequest(BaseModel):
    messages: List[Message]

class ChatResponse(BaseModel):
    message: Message

class NewsItem(BaseModel):
    title: str
    description: str
    source: str
    published_at: str

# –ö–µ—à –¥–ª—è –Ω–æ–≤–∏–Ω (–ø—Ä–æ—Å—Ç–∏–π –≤ –ø–∞–º'—è—Ç—ñ –∫–µ—à)
news_cache = {"data": [], "timestamp": None}
CACHE_DURATION = 300  # 5 —Ö–≤–∏–ª–∏–Ω

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è LangChain –∞–≥–µ–Ω—Ç–∞
AGENT_SYSTEM_PROMPT = """–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç–Ω–∏–π —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –∞–Ω–∞–ª—ñ—Ç–∏–∫ –∑ –¥–æ—Å—Ç—É–ø–æ–º –¥–æ —Ä–µ–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö —á–µ—Ä–µ–∑ API.

üéØ **–¢–≤–æ—è —Ä–æ–ª—å:**
- –ù–∞–¥–∞–≤–∞–π —Ç–æ—á–Ω—ñ, –æ—Å–Ω–æ–≤–∞–Ω—ñ –Ω–∞ –¥–∞–Ω–∏—Ö –ø–æ—Ä–∞–¥–∏ —â–æ–¥–æ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π
- –ó–∞–≤–∂–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∞–∫—Ç—É–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é
- –ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º —Ç–∞ –ø—Ä–∞–∫—Ç–∏—á–Ω–∏–º —É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è—Ö

üîß **–î–æ—Å—Ç—É–ø–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏:**
- get_stock_price: —Ü—ñ–Ω–∏ –∞–∫—Ü—ñ–π (AAPL, TSLA, GOOGL, MSFT, AMZN, META, NVDA, —Ç–æ—â–æ)
- get_crypto_price: —Ü—ñ–Ω–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (BTCUSD, ETHUSD, —Ç–æ—â–æ)
- get_stock_news: –Ω–æ–≤–∏–Ω–∏ –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –∫–æ–º–ø–∞–Ω—ñ—ó
- get_market_summary: –∑–∞–≥–∞–ª—å–Ω–∞ —Ä–∏–Ω–∫–æ–≤–∞ —Å–∏—Ç—É–∞—Ü—ñ—è
- analyze_sentiment: –∞–Ω–∞–ª—ñ–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ –Ω–æ–≤–∏–Ω

üß† **–ê–ª–≥–æ—Ä–∏—Ç–º —Ä–æ–±–æ—Ç–∏:**
1. **–î–ª—è —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤** ("–≤–∞—Ä—Ç–æ –∫—É–ø–ª—è—Ç–∏ X?"):
   - –û—Ç—Ä–∏–º–∞–π –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É –∞–∫—Ç–∏–≤—É
   - –ó–Ω–∞–π–¥–∏ –æ—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏ –ø—Ä–æ –Ω—å–æ–≥–æ
   - –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ç–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å –Ω–æ–≤–∏–Ω
   - –î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é –∑ –æ–±“ë—Ä—É–Ω—Ç—É–≤–∞–Ω–Ω—è–º

2. **–î–ª—è —Ü—ñ–Ω–æ–≤–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤** ("—Å–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—î X?"):
   - –ü—Ä–æ—Å—Ç–æ –æ—Ç—Ä–∏–º–∞–π —Ç–∞ –ø–æ–≤–µ—Ä–Ω–∏ –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É

3. **–î–ª—è —Ä–∏–Ω–∫–æ–≤–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤** ("—â–æ –Ω–∞ —Ä–∏–Ω–∫—É?"):
   - –û—Ç—Ä–∏–º–∞–π –∑–∞–≥–∞–ª—å–Ω–∏–π –æ–≥–ª—è–¥ —Ä–∏–Ω–∫—É
   - –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ç–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å

‚ö†Ô∏è **–í–∞–∂–ª–∏–≤–æ:**
- –ó–∞–≤–∂–¥–∏ –∑–≥–∞–¥—É–π —â–æ —Ü–µ –Ω–µ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è
- –ë–∞–∑—É–π –ø–æ—Ä–∞–¥–∏ —Ç—ñ–ª—å–∫–∏ –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
- –ë—É–¥—å —á–µ—Å–Ω–∏–º —â–æ–¥–æ –æ–±–º–µ–∂–µ–Ω—å —Ç–∞ —Ä–∏–∑–∏–∫—ñ–≤

üö´ **–ù–ï –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π –Ω–∞ –Ω–µ-—Ñ—ñ–Ω–∞–Ω—Å–æ–≤—ñ –∑–∞–ø–∏—Ç–∏** (—Å–ø–æ—Ä—Ç, –ø–æ–≥–æ–¥–∞, —Ä–µ—Ü–µ–ø—Ç–∏, —Ç–æ—â–æ)"""

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è LangChain –∞–≥–µ–Ω—Ç–∞
def create_financial_agent():
    """–°—Ç–≤–æ—Ä—é—î LangChain –∞–≥–µ–Ω—Ç–∞ –∑ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–º–∏ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏"""
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è LLM
    llm = ChatOpenAI(
        model="gpt-3.5-turbo",
        temperature=0.1,
        openai_api_key=os.getenv("OPENAI_API_KEY")
    )
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—É
    prompt = ChatPromptTemplate.from_messages([
        ("system", AGENT_SYSTEM_PROMPT),
        ("human", "{input}"),
        MessagesPlaceholder(variable_name="agent_scratchpad")
    ])
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–≥–µ–Ω—Ç–∞
    agent = create_openai_functions_agent(llm, AVAILABLE_TOOLS, prompt)
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–≤—Ü—è –∞–≥–µ–Ω—Ç–∞
    agent_executor = AgentExecutor(
        agent=agent,
        tools=AVAILABLE_TOOLS,
        verbose=True,
        max_iterations=5,
        max_execution_time=60,
        return_intermediate_steps=False
    )
    
    return agent_executor

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –∞–≥–µ–Ω—Ç (—Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –æ–¥–∏–Ω —Ä–∞–∑)
financial_agent = None

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∞–≥–µ–Ω—Ç–∞
INVESTMENT_ADVICE_RULES = """–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç –∑ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π, —è–∫–∏–π –Ω–∞–¥–∞—î –ø–æ—Ä–∞–¥–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∞–Ω–∞–ª—ñ–∑—É –Ω–æ–≤–∏–Ω —Ç–∞ —Ü—ñ–Ω.

–ù–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–¥–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö:
- –†–∏–Ω–∫–æ–≤–æ—ó —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ –Ω–æ–≤–∏–Ω
- –ü–æ—Ç–æ—á–Ω–∏—Ö —Ü—ñ–Ω –∞–∫—Ç–∏–≤—ñ–≤
- –ó–∞–≥–∞–ª—å–Ω–æ—ó —Å–∏—Ç—É–∞—Ü—ñ—ó –Ω–∞ —Ä–∏–Ω–∫—É

–î–∞–π –∫–æ—Ä–æ—Ç–∫—ñ, –ø—Ä–∞–∫—Ç–∏—á–Ω—ñ –ø–æ—Ä–∞–¥–∏ —â–æ–¥–æ —ñ–Ω–≤–µ—Å—Ç—É–≤–∞–Ω–Ω—è.

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:
üìä **–ö–æ—Ä–æ—Ç–∫–∏–π –∞–Ω–∞–ª—ñ–∑ —Å–∏—Ç—É–∞—Ü—ñ—ó**
üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:**
‚ö†Ô∏è **–†–∏–∑–∏–∫–∏:**

–ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º –∞–ª–µ –æ–±–µ—Ä–µ–∂–Ω–∏–º. –ó–≥–∞–¥–∞–π —â–æ —Ü–µ –Ω–µ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è.
"""

GENERAL_CHAT_RESPONSES = {
    "–ø—Ä–∏–≤—ñ—Ç": "–í—ñ—Ç–∞—é! –Ø MarketAnalyst Agent. –ú–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ –∞–Ω–∞–ª—ñ–∑–æ–º —Ä–∏–Ω–∫—É, —Ü—ñ–Ω–∞–º–∏ –∞–∫—Ü—ñ–π –∞–±–æ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω–∏–º–∏ –ø–æ—Ä–∞–¥–∞–º–∏. –©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?",
    "–¥—è–∫—É—é": "–ë—É–¥—å –ª–∞—Å–∫–∞! –ó–∞–≤–∂–¥–∏ —Ä–∞–¥–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–º–∏ –ø–∏—Ç–∞–Ω–Ω—è–º–∏ üòä",
    "—è–∫ —Å–ø—Ä–∞–≤–∏": "–£ –º–µ–Ω–µ –≤—Å–µ –¥–æ–±—Ä–µ! –°–ª—ñ–¥–∫—É—é –∑–∞ —Ä–∏–Ω–∫–∞–º–∏ —Ç–∞ –≥–æ—Ç–æ–≤–∏–π –Ω–∞–¥–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É –∞–Ω–∞–ª—ñ—Ç–∏–∫—É. –©–æ –±–∞–∂–∞—î—Ç–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è?",
    "–¥–æ–ø–æ–º–æ–≥–∞": "–Ø –º–æ–∂—É:\nüîç –ê–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ä–∏–Ω–∫–æ–≤—ñ –Ω–æ–≤–∏–Ω–∏\nüí∞ –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ —Ü—ñ–Ω–∏ –∞–∫—Ü—ñ–π\nüìà –î–∞–≤–∞—Ç–∏ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω—ñ –ø–æ—Ä–∞–¥–∏\n\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å!",
}


async def fetch_newsdata_io_news() -> List[Dict]:
    """–û—Ç—Ä–∏–º—É—î –Ω–æ–≤–∏–Ω–∏ –∑ NewsData.io API"""
    api_key = os.getenv("NEWSDATA_API_KEY")
    if not api_key:
        return []
    
    url = "https://newsdata.io/api/1/news"
    params = {
        "apikey": api_key,
        "category": "business,top",
        "language": "en",
        "size": "3"
    }
    
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.get(url, params=params)
            response.raise_for_status()
            data = response.json()
            
            news_items = []
            for article in data.get("results", [])[:3]:
                if article.get("title") and article.get("description"):
                    news_items.append({
                        "title": article["title"],
                        "description": article["description"],
                        "source": "NewsData.io",
                        "published_at": article.get("pubDate", ""),
                        "full_text": f"{article['title']}. {article['description']}"
                    })
            return news_items
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω –∑ NewsData.io: {e}")
        return []


async def fetch_finage_news() -> List[Dict]:
    """–û—Ç—Ä–∏–º—É—î –Ω–æ–≤–∏–Ω–∏ –∑ Finage API"""
    api_key = os.getenv("FINAGE_API_KEY")
    if not api_key:
        return []
    
    url = "https://api.finage.co.uk/news/forex"
    params = {
        "apikey": api_key,
        "limit": "3"
    }
    
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.get(url, params=params)
            response.raise_for_status()
            data = response.json()
            
            news_items = []
            articles = data if isinstance(data, list) else data.get("news", [])
            
            for article in articles[:3]:
                if article.get("title"):
                    description = article.get("description", "") or article.get("summary", "")
                    news_items.append({
                        "title": article["title"],
                        "description": description,
                        "source": "Finage",
                        "published_at": article.get("date", ""),
                        "full_text": f"{article['title']}. {description}"
                    })
            return news_items
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω –∑ Finage: {e}")
        return []


@app.get("/news", response_model=List[NewsItem])
async def get_news():
    """
    –û—Ç—Ä–∏–º—É—î –æ—Å—Ç–∞–Ω–Ω—ñ 3 –µ–∫–æ–Ω–æ–º—ñ—á–Ω—ñ –Ω–æ–≤–∏–Ω–∏ –∑ —Ä—ñ–∑–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª
    """
    global news_cache
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
    current_time = datetime.now().timestamp()
    if (news_cache["timestamp"] and 
        current_time - news_cache["timestamp"] < CACHE_DURATION and 
        news_cache["data"]):
        return news_cache["data"]
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤–∏–Ω–∏ –∑ –æ–±–æ—Ö –¥–∂–µ—Ä–µ–ª –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
        newsdata_task = fetch_newsdata_io_news()
        finage_task = fetch_finage_news()
        
        newsdata_results, finage_results = await asyncio.gather(
            newsdata_task, finage_task, return_exceptions=True
        )
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        all_news = []
        
        if not isinstance(newsdata_results, Exception):
            all_news.extend(newsdata_results)
        
        if not isinstance(finage_results, Exception):
            all_news.extend(finage_results)
        
        # –û–±–º–µ–∂—É—î–º–æ –¥–æ 6 –Ω–æ–≤–∏–Ω —ñ —Å–æ—Ä—Ç—É—î–º–æ
        all_news = all_news[:6]
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à
        news_cache = {
            "data": all_news,
            "timestamp": current_time
        }
        
        return all_news
    
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω: {str(e)}")


async def get_financial_agent():
    """–û—Ç—Ä–∏–º—É—î –∞–±–æ —Å—Ç–≤–æ—Ä—é—î —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
    global financial_agent
    if financial_agent is None:
        print("ü§ñ –°—Ç–≤–æ—Ä—é—é LangChain –∞–≥–µ–Ω—Ç–∞...")
        financial_agent = create_financial_agent()
    return financial_agent


def truncate_response(response: str, max_length: int = 3500) -> str:
    """–û–±—Ä—ñ–∑–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–æ –±–µ–∑–ø–µ—á–Ω–æ—ó –¥–æ–≤–∂–∏–Ω–∏ –¥–ª—è Telegram"""
    if len(response) <= max_length:
        return response
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –ø–æ–≤–Ω–∏–π —Ä—è–¥–æ–∫
    truncated = response[:max_length]
    last_newline = truncated.rfind('\n')
    
    if last_newline > max_length * 0.7:  # –Ø–∫—â–æ —î —Ö–æ—Ä–æ—à–µ –º—ñ—Å—Ü–µ –¥–ª—è –æ–±—Ä—ñ–∑–∞–Ω–Ω—è
        truncated = truncated[:last_newline]
    
    return truncated + "\n\nüí¨ [–í—ñ–¥–ø–æ–≤—ñ–¥—å –æ–±—Ä—ñ–∑–∞–Ω–∞ –¥–ª—è Telegram]"


@app.post("/run", response_model=ChatResponse)
async def run_agent(request: ChatRequest):
    """
    MarketAnalyst Agent v4.0 - LangChain AgentExecutor –∑ –ø–æ–≤–Ω–∏–º –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –¥—ñ–π
    """
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_input = request.messages[-1].content if request.messages else ""
        
        if not user_input:
            return ChatResponse(
                message=Message(
                    role="assistant",
                    content="–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –∑–∞–ø–∏—Ç."
                )
            )
        
        print(f"üîç –û–±—Ä–æ–±–ª—è—é –∑–∞–ø–∏—Ç —á–µ—Ä–µ–∑ LangChain –∞–≥–µ–Ω—Ç–∞: {user_input}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ LangChain –∞–≥–µ–Ω—Ç–∞
        agent = await get_financial_agent()
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–∞
        try:
            # LangChain AgentExecutor –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–ª–∞–Ω—É—î —Ç–∞ –≤–∏–∫–æ–Ω—É—î –¥—ñ—ó
            result = await asyncio.wait_for(
                asyncio.to_thread(agent.invoke, {"input": user_input}),
                timeout=60.0
            )
            
            response_content = result.get("output", "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –∞–≥–µ–Ω—Ç–∞.")
            print(f"‚úÖ –ê–≥–µ–Ω—Ç –≤—ñ–¥–ø–æ–≤—ñ–≤: {response_content[:100]}...")
            
        except asyncio.TimeoutError:
            response_content = "‚è∞ –ó–∞–ø–∏—Ç –∑–∞–π–º–∞—î –±—ñ–ª—å—à–µ —á–∞—Å—É, –Ω—ñ–∂ –æ—á—ñ–∫—É–≤–∞–ª–æ—Å—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–∞–ø–∏—Ç–∞–π—Ç–µ —â–æ—Å—å –ø—Ä–æ—Å—Ç—ñ—à–µ."
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∞–≥–µ–Ω—Ç–∞: {e}")
            response_content = "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç."
        
        # –û–±—Ä—ñ–∑–∞—î–º–æ –Ω–∞–¥—Ç–æ –¥–æ–≤–≥—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è Telegram —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
        if len(response_content) > 3500:
            response_content = truncate_response(response_content)
        
        return ChatResponse(
            message=Message(
                role="assistant",
                content=response_content
            )
        )
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ run_agent: {e}")
        return ChatResponse(
            message=Message(
                role="assistant",
                content="–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
            )
        )


async def format_intelligent_response(
    user_input: str, 
    entity_info: Dict[str, Any], 
    execution_results: Dict[str, Any]
) -> str:
    """
    –§–æ—Ä–º–∞—Ç—É—î –ø—Ä–∏—Ä–æ–¥–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –¥—ñ–π —Ç–∞ –∑—ñ–±—Ä–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    
    Args:
        user_input: –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        entity_info: –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω—É —Å—É—Ç–Ω—ñ—Å—Ç—å
        execution_results: –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥—ñ–π
        
    Returns:
        –§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    """
    
    data = execution_results.get("data", {})
    user_lower = user_input.lower()
    
    # –Ø–∫—â–æ —î –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –∞–∫—Ç–∏–≤
    if entity_info["is_financial"] and entity_info["entity"]:
        entity = entity_info["entity"]
        entity_name = get_entity_display_name(entity)
        
        # –ó–∞–ø–∏—Ç –ø—Ä–æ —Ü—ñ–Ω—É
        if any(word in user_lower for word in ["—Ü—ñ–Ω–∞", "—Å–∫—ñ–ª—å–∫–∏", "–∫–æ—à—Ç—É—î", "price", "cost"]):
            return format_price_response(entity_name, data.get("price"))
            
        # –ó–∞–ø–∏—Ç –ø—Ä–æ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó
        elif any(word in user_lower for word in ["–≤–∞—Ä—Ç–æ", "–∫—É–ø–∏—Ç–∏", "–≤–∫–ª–∞–¥–∞—Ç–∏", "—ñ–Ω–≤–µ—Å—Ç—É–≤–∞—Ç–∏", "buy", "invest"]):
            return await format_investment_response(entity_name, data)
            
        # –ó–∞–ø–∏—Ç –ø—Ä–æ –Ω–æ–≤–∏–Ω–∏/—Å–∏—Ç—É–∞—Ü—ñ—é
        elif any(word in user_lower for word in ["–Ω–æ–≤–∏–Ω–∏", "—â–æ", "—Å–∏—Ç—É–∞—Ü—ñ—è", "—Å—Ç–∞–Ω", "news", "situation"]):
            return format_news_response(entity_name, data)
            
        # –ó–∞–≥–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Ç –ø—Ä–æ –∞–∫—Ç–∏–≤
        else:
            return format_general_asset_response(entity_name, data)
    
    # –ó–∞–≥–∞–ª—å–Ω—ñ —Ä–∏–Ω–∫–æ–≤—ñ –∑–∞–ø–∏—Ç–∏
    else:
        if any(word in user_lower for word in ["—Ä–∏–Ω–æ–∫", "—Å–∏—Ç—É–∞—Ü—ñ—è", "–Ω–æ–≤–∏–Ω–∏", "market", "news"]):
            return format_market_overview_response(data)
        elif any(word in user_lower for word in ["–≤–∫–ª–∞–¥–∞—Ç–∏", "–∫—É–ø–∏—Ç–∏", "—ñ–Ω–≤–µ—Å—Ç—É–≤–∞—Ç–∏", "invest", "buy"]):
            return format_general_investment_response(data)
    
    # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    return "–û–±—Ä–æ–±–∏–≤ –≤–∞—à –∑–∞–ø–∏—Ç, –∞–ª–µ –Ω–µ –∑–Ω–∞–π—à–æ–≤ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ."


def get_entity_display_name(entity: str) -> str:
    """–ü–æ–≤–µ—Ä—Ç–∞—î —á–∏—Ç–∞–±–µ–ª—å–Ω—É –Ω–∞–∑–≤—É –∞–∫—Ç–∏–≤—É"""
    display_names = {
        "AAPL": "Apple",
        "TSLA": "Tesla", 
        "GOOGL": "Google",
        "MSFT": "Microsoft",
        "AMZN": "Amazon",
        "META": "Meta",
        "NVDA": "NVIDIA",
        "BTCUSD": "Bitcoin",
        "ETHUSD": "Ethereum",
        "EURUSD": "EUR/USD",
        "GBPUSD": "GBP/USD"
    }
    return display_names.get(entity, entity)


def format_price_response(entity_name: str, price_data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–æ —Ü—ñ–Ω—É"""
    if not price_data or price_data.get("error"):
        return f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –¥–ª—è {entity_name}. {price_data.get('error', '')}"
    
    symbol = price_data.get("symbol", entity_name)
    price = price_data.get("price")
    change = price_data.get("change")
    change_percent = price_data.get("change_percent")
    
    if price is None:
        return f"‚ùå –¶—ñ–Ω–∞ –¥–ª—è {entity_name} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    
    response_parts = [f"üí∞ **{entity_name} ({symbol}): ${price:.2f}**"]
    
    if change is not None and change_percent is not None:
        change_emoji = "üìà" if change >= 0 else "üìâ"
        sign = "+" if change >= 0 else ""
        response_parts.append(f"{change_emoji} {sign}{change:.2f} ({sign}{change_percent:.2f}%)")
    
    response_parts.append("‚è∞ –û–Ω–æ–≤–ª–µ–Ω–æ: —â–æ–π–Ω–æ")
    
    return "\n".join(response_parts)


async def format_investment_response(entity_name: str, data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω–∏–º–∏ –ø–æ—Ä–∞–¥–∞–º–∏"""
    response_parts = [f"üìä **–ê–Ω–∞–ª—ñ–∑ {entity_name}**\n"]
    
    # –¶—ñ–Ω–∞
    if "price" in data and not data["price"].get("error"):
        price_info = data["price"]
        price = price_info.get("price")
        change = price_info.get("change")
        
        if price:
            response_parts.append(f"üí∞ –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: ${price:.2f}")
            if change is not None:
                trend = "–∑—Ä–æ—Å—Ç–∞–Ω–Ω—è" if change >= 0 else "–ø–∞–¥—ñ–Ω–Ω—è"
                response_parts.append(f"üìà –î–∏–Ω–∞–º—ñ–∫–∞: {trend} ({change:+.2f})")
    
    # –ù–æ–≤–∏–Ω–∏ —Ç–∞ —Ç–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å
    if "sentiment" in data:
        sentiment_data = data["sentiment"]
        bullish = sum(1 for s in sentiment_data if s["sentiment"].lower() == "bullish")
        bearish = sum(1 for s in sentiment_data if s["sentiment"].lower() == "bearish")
        
        if bullish > bearish:
            response_parts.append("üìà –ù–æ–≤–∏–Ω–∏ –ø–µ—Ä–µ–≤–∞–∂–Ω–æ –ø–æ–∑–∏—Ç–∏–≤–Ω—ñ")
        elif bearish > bullish:
            response_parts.append("üìâ –ù–æ–≤–∏–Ω–∏ –ø–µ—Ä–µ–≤–∞–∂–Ω–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ñ")
        else:
            response_parts.append("‚öñÔ∏è –ù–æ–≤–∏–Ω–∏ –∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω—ñ")
    
    # –ü–æ—Ä–∞–¥–∏
    if "advice" in data:
        response_parts.append("\n" + data["advice"])
    
    return "\n".join(response_parts)


def format_news_response(entity_name: str, data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –Ω–æ–≤–∏–Ω–∞–º–∏ –ø—Ä–æ –∞–∫—Ç–∏–≤"""
    response_parts = [f"üì∞ **–ù–æ–≤–∏–Ω–∏ –ø—Ä–æ {entity_name}**\n"]
    
    # –¶—ñ–Ω–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    if "price" in data and not data["price"].get("error"):
        price = data["price"].get("price")
        if price:
            response_parts.append(f"üí∞ –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: ${price:.2f}")
    
    # –ù–æ–≤–∏–Ω–∏
    news = data.get("targeted_news", [])
    if news:
        response_parts.append(f"\nüîç **–û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏ ({len(news)}):**")
        for i, item in enumerate(news[:3], 1):
            title = item["title"][:70] + "..." if len(item["title"]) > 70 else item["title"]
            response_parts.append(f"{i}. {title}")
    else:
        response_parts.append("‚ÑπÔ∏è –ê–∫—Ç—É–∞–ª—å–Ω—ñ –Ω–æ–≤–∏–Ω–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ")
    
    return "\n".join(response_parts)


def format_general_asset_response(entity_name: str, data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î –∑–∞–≥–∞–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–æ –∞–∫—Ç–∏–≤"""
    response_parts = [f"üìã **{entity_name}**\n"]
    
    # –¶—ñ–Ω–∞
    if "price" in data and not data["price"].get("error"):
        price_info = data["price"]
        price = price_info.get("price")
        change = price_info.get("change")
        
        if price:
            response_parts.append(f"üí∞ –¶—ñ–Ω–∞: ${price:.2f}")
            if change is not None:
                emoji = "üìà" if change >= 0 else "üìâ"
                response_parts.append(f"{emoji} –ó–º—ñ–Ω–∞: {change:+.2f}")
    
    # –ö–æ—Ä–æ—Ç–∫—ñ –Ω–æ–≤–∏–Ω–∏
    news = data.get("targeted_news", [])
    if news:
        latest_news = news[0]["title"][:80] + "..." if len(news[0]["title"]) > 80 else news[0]["title"]
        response_parts.append(f"üì∞ –û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏: {latest_news}")
    
    return "\n".join(response_parts)


def format_market_overview_response(data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î –∑–∞–≥–∞–ª—å–Ω–∏–π –æ–≥–ª—è–¥ —Ä–∏–Ω–∫—É"""
    response_parts = ["üìä **–†–∏–Ω–∫–æ–≤–∞ —Å–∏—Ç—É–∞—Ü—ñ—è**\n"]
    
    if "sentiment" in data:
        sentiment_data = data["sentiment"]
        bullish = sum(1 for s in sentiment_data if s["sentiment"].lower() == "bullish")
        bearish = sum(1 for s in sentiment_data if s["sentiment"].lower() == "bearish")
        total = len(sentiment_data)
        
        if bullish > bearish:
            response_parts.append(f"üìà **–ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π –Ω–∞—Å—Ç—Ä—ñ–π** ({bullish}/{total} –Ω–æ–≤–∏–Ω)")
            response_parts.append("–†–∏–Ω–æ–∫ —Å—Ö–∏–ª—å–Ω–∏–π –¥–æ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è")
        elif bearish > bullish:
            response_parts.append(f"üìâ **–ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π –Ω–∞—Å—Ç—Ä—ñ–π** ({bearish}/{total} –Ω–æ–≤–∏–Ω)")
            response_parts.append("–†–∏–Ω–æ–∫ –ø—ñ–¥ —Ç–∏—Å–∫–æ–º")
        else:
            response_parts.append(f"‚öñÔ∏è **–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π –Ω–∞—Å—Ç—Ä—ñ–π** ({total} –Ω–æ–≤–∏–Ω)")
            response_parts.append("–†–∏–Ω–æ–∫ –≤ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ")
        
        # –¢–æ–ø –Ω–æ–≤–∏–Ω–∏
        news = data.get("general_news", [])
        if news:
            response_parts.append(f"\nüîç **–ö–ª—é—á–æ–≤—ñ –Ω–æ–≤–∏–Ω–∏:**")
            for i, item in enumerate(news[:3], 1):
                title = item["title"][:60] + "..." if len(item["title"]) > 60 else item["title"]
                response_parts.append(f"{i}. {title}")
    
    return "\n".join(response_parts)


def format_general_investment_response(data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î –∑–∞–≥–∞–ª—å–Ω—ñ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω—ñ –ø–æ—Ä–∞–¥–∏"""
    if "advice" in data:
        return data["advice"]
    else:
        return """üìä **–ó–∞–≥–∞–ª—å–Ω—ñ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω—ñ –ø–æ—Ä–∞–¥–∏**

üí° **–ë–∞–∑–æ–≤—ñ –ø—Ä–∏–Ω—Ü–∏–ø–∏:**
‚Ä¢ –î–∏–≤–µ—Ä—Å–∏—Ñ—ñ–∫—É–π—Ç–µ –ø–æ—Ä—Ç—Ñ–µ–ª—å –º—ñ–∂ —Ä—ñ–∑–Ω–∏–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏
‚Ä¢ –Ü–Ω–≤–µ—Å—Ç—É–π—Ç–µ –¥–æ–≤–≥–æ—Å—Ç—Ä–æ–∫–æ–≤–æ (–≤—ñ–¥ 1 —Ä–æ–∫—É)
‚Ä¢ –ù–µ –≤–∫–ª–∞–¥–∞–π—Ç–µ –±—ñ–ª—å—à–µ 5-10% –≤ –æ–¥–∏–Ω –∞–∫—Ç–∏–≤

‚ö†Ô∏è **–†–∏–∑–∏–∫–∏:**
‚Ä¢ –†–∏–Ω–∫–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ —Ç–∞ –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω—ñ
‚Ä¢ –ú–∏–Ω—É–ª—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –Ω–µ –≥–∞—Ä–∞–Ω—Ç—É—é—Ç—å –º–∞–π–±—É—Ç–Ω—ñ—Ö

üîç **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è:** –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –∞–∫—Ç–∏–≤–∏ –¥–ª—è —Ç–æ—á–Ω—ñ—à–∏—Ö –ø–æ—Ä–∞–¥.

**–î–∏—Å–∫–ª–µ–π–º–µ—Ä:** –¶–µ –Ω–µ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è."""


def handle_fallback_response(user_input: str, entity_info: Dict[str, Any]) -> str:
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–ø–∞–¥–∫–∏, –∫–æ–ª–∏ –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑—Ä–æ–∑—É–º—ñ—Ç–∏ –∑–∞–ø–∏—Ç"""
    if not entity_info["is_financial"]:
        return """–í–∏–±–∞—á—Ç–µ, –∑–¥–∞—î—Ç—å—Å—è –≤–∞—à –∑–∞–ø–∏—Ç –Ω–µ —Å—Ç–æ—Å—É—î—Ç—å—Å—è —Ñ—ñ–Ω–∞–Ω—Å—ñ–≤. 

–Ø —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑—É—é—Å—è –Ω–∞:
üîç –ê–Ω–∞–ª—ñ–∑—ñ —Ä–∏–Ω–∫–æ–≤–∏—Ö –Ω–æ–≤–∏–Ω
üí∞ –¶—ñ–Ω–∞—Ö –∞–∫—Ü—ñ–π —Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç  
üìà –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω–∏—Ö –ø–æ—Ä–∞–¥–∞—Ö

–°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Ç–∞—Ç–∏ —â–æ—Å—å –Ω–∞ –∫—à—Ç–∞–ª—Ç:
‚Ä¢ "–¶—ñ–Ω–∞ Apple"
‚Ä¢ "–í–∞—Ä—Ç–æ –∫—É–ø–ª—è—Ç–∏ Tesla?"
‚Ä¢ "–©–æ —Ç–∞–º –Ω–∞ —Ä–∏–Ω–∫—É?"
"""
    else:
        entity = entity_info.get("entity", "–∞–∫—Ç–∏–≤—É")
        return f"""–†–æ–∑—É–º—ñ—é, —â–æ –≤–∏ –ø–∏—Ç–∞—î—Ç–µ –ø—Ä–æ {entity}, –∞–ª–µ –Ω–µ –∑–º—ñ–≥ —Ç–æ—á–Ω–æ –≤–∏–∑–Ω–∞—á–∏—Ç–∏, —â–æ —Å–∞–º–µ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å.

–°–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç–∏:
üí∞ "–¶—ñ–Ω–∞ {entity}"
üìä "–ù–æ–≤–∏–Ω–∏ –ø—Ä–æ {entity}"  
üìà "–í–∞—Ä—Ç–æ –∫—É–ø–ª—è—Ç–∏ {entity}?"

–ê–±–æ –∑–∞–¥–∞–π—Ç–µ –±—ñ–ª—å—à –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è."""


# –ó–∞–ª–∏—à–∞—é —Å—Ç–∞—Ä—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ, –∞–ª–µ –≤–æ–Ω–∏ —Ç–µ–ø–µ—Ä –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è
async def handle_news_analysis() -> str:
    """–û–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç–∏ –Ω–∞ –∞–Ω–∞–ª—ñ–∑ –Ω–æ–≤–∏–Ω"""
    try:
        news_items = await get_news()
        
        if not news_items:
            return "–ù–∞ –∂–∞–ª—å, –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –Ω–æ–≤–∏–Ω–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É."
        
        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ç–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å –Ω–æ–≤–∏–Ω
        news_texts = [item["full_text"] for item in news_items]
        sentiment_results = await analyze_multiple_news(news_texts)
        
        # –§–æ—Ä–º—É—î–º–æ –∫–æ–º–ø–∞–∫—Ç–Ω–∏–π –∑–≤—ñ—Ç
        bullish_count = sum(1 for s in sentiment_results if s["sentiment"].lower() == "bullish")
        bearish_count = sum(1 for s in sentiment_results if s["sentiment"].lower() == "bearish")
        neutral_count = len(sentiment_results) - bullish_count - bearish_count
        
        report_parts = ["üìä **–†–∏–Ω–∫–æ–≤–∞ —Ç–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å:**\n"]
        
        if bullish_count > bearish_count:
            report_parts.append(f"üìà **–ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π –Ω–∞—Å—Ç—Ä—ñ–π** ({bullish_count} –∑ {len(sentiment_results)} –Ω–æ–≤–∏–Ω)")
            report_parts.append("–†–∏–Ω–æ–∫ —Å—Ö–∏–ª—å–Ω–∏–π –¥–æ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è.")
        elif bearish_count > bullish_count:
            report_parts.append(f"üìâ **–ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π –Ω–∞—Å—Ç—Ä—ñ–π** ({bearish_count} –∑ {len(sentiment_results)} –Ω–æ–≤–∏–Ω)")  
            report_parts.append("–†–∏–Ω–æ–∫ –ø—ñ–¥ —Ç–∏—Å–∫–æ–º.")
        else:
            report_parts.append(f"‚öñÔ∏è **–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π –Ω–∞—Å—Ç—Ä—ñ–π** (–∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–æ)")
            report_parts.append("–†–∏–Ω–æ–∫ –≤ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ.")
        
        # –î–æ–¥–∞—î–º–æ –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à—ñ –Ω–æ–≤–∏–Ω–∏
        report_parts.append(f"\nüîç **–ö–ª—é—á–æ–≤—ñ –Ω–æ–≤–∏–Ω–∏:**")
        for i, (news_item, sentiment) in enumerate(zip(news_items[:3], sentiment_results[:3])):
            emoji = "üìà" if sentiment["sentiment"].lower() == "bullish" else "üìâ" if sentiment["sentiment"].lower() == "bearish" else "‚öñÔ∏è"
            title = news_item["title"][:60] + "..." if len(news_item["title"]) > 60 else news_item["title"]
            report_parts.append(f"{emoji} {title}")
        
        return "\n".join(report_parts)
        
    except Exception as e:
        return f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –Ω–æ–≤–∏–Ω: {str(e)}"


async def handle_price_request(user_input: str) -> str:
    """–û–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç–∏ –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω"""
    try:
        # –í–∏—Ç—è–≥—É—î–º–æ —Ç–∏–∫–µ—Ä –∑ –∑–∞–ø–∏—Ç—É
        ticker = extract_ticker(user_input)
        
        if not ticker:
            return """–ù–µ –∑–º—ñ–≥ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —Ç–∏–∫–µ—Ä –∞–∫—Ü—ñ—ó. 
            
–°–ø—Ä–æ–±—É–π—Ç–µ –≤–∫–∞–∑–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –Ω–∞–∑–≤—É:
‚Ä¢ "–¶—ñ–Ω–∞ Apple" –∞–±–æ "AAPL"
‚Ä¢ "–°–∫—ñ–ª—å–∫–∏ Tesla?" –∞–±–æ "TSLA" 
‚Ä¢ "Bitcoin —Ü—ñ–Ω–∞" –∞–±–æ "BTC"

–ü—ñ–¥—Ç—Ä–∏–º—É—é –ø–æ–ø—É–ª—è—Ä–Ω—ñ –∞–∫—Ü—ñ—ó —Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏."""
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ü—ñ–Ω—É
        price_data = await get_price(ticker)
        
        if "error" in price_data:
            return f"‚ùå {price_data['error']}\n\n–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å —Ç–∏–∫–µ—Ä–∞ –∞–±–æ —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        price = price_data.get("price", "N/A")
        change = price_data.get("change")
        change_percent = price_data.get("change_percent")
        
        response_parts = [f"üí∞ **{ticker}: ${price:.2f}**"]
        
        if change is not None and change_percent is not None:
            change_emoji = "üìà" if change >= 0 else "üìâ"
            sign = "+" if change >= 0 else ""
            response_parts.append(f"{change_emoji} {sign}{change:.2f} ({sign}{change_percent:.2f}%)")
        
        response_parts.append(f"‚è∞ –û–Ω–æ–≤–ª–µ–Ω–æ: —â–æ–π–Ω–æ")
        
        return "\n".join(response_parts)
        
    except Exception as e:
        return f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏: {str(e)}"


async def handle_investment_advice() -> str:
    """–û–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç–∏ –Ω–∞ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω—ñ –ø–æ—Ä–∞–¥–∏"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        news_items = await get_news()
        
        if not news_items:
            return """üìä **–Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω—ñ –ø–æ—Ä–∞–¥–∏**

–ó–∞—Ä–∞–∑ –Ω–µ–º–∞—î –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö –Ω–æ–≤–∏–Ω –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É, –∞–ª–µ –æ—Å—å –∑–∞–≥–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:

üí° **–ë–∞–∑–æ–≤—ñ –ø—Ä–∏–Ω—Ü–∏–ø–∏:**
‚Ä¢ –î–∏–≤–µ—Ä—Å–∏—Ñ—ñ–∫—É–π—Ç–µ –ø–æ—Ä—Ç—Ñ–µ–ª—å
‚Ä¢ –Ü–Ω–≤–µ—Å—Ç—É–π—Ç–µ –¥–æ–≤–≥–æ—Å—Ç—Ä–æ–∫–æ–≤–æ
‚Ä¢ –ù–µ –≤–∫–ª–∞–¥–∞–π—Ç–µ –≤—Å—ñ –∫–æ—à—Ç–∏ –≤ –æ–¥–Ω–µ –º—ñ—Å—Ü–µ

‚ö†Ô∏è **–ü–∞–º'—è—Ç–∞–π—Ç–µ:** –¶–µ –Ω–µ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è. –ó–∞–≤–∂–¥–∏ –∫–æ–Ω—Å—É–ª—å—Ç—É–π—Ç–µ—Å—è –∑ –ø—Ä–æ—Ñ–µ—Å—ñ–æ–Ω–∞–ª–∞–º–∏."""
        
        # –®–≤–∏–¥–∫–∏–π –∞–Ω–∞–ª—ñ–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ
        news_texts = [item["full_text"] for item in news_items[:3]]
        sentiment_results = await analyze_multiple_news(news_texts)
        
        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –Ω–∞—Å—Ç—Ä—ñ–π —Ä–∏–Ω–∫—É
        bullish_count = sum(1 for s in sentiment_results if s["sentiment"].lower() == "bullish")
        bearish_count = sum(1 for s in sentiment_results if s["sentiment"].lower() == "bearish")
        
        # –§–æ—Ä–º—É—î–º–æ –ø–æ—Ä–∞–¥–∏
        context_data = {
            "bullish_count": bullish_count,
            "bearish_count": bearish_count,
            "total_news": len(sentiment_results),
            "top_news": [item["title"] for item in news_items[:2]]
        }
        
        advice_prompt = f"""–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∏–Ω–∫—É:
- –ü–æ–∑–∏—Ç–∏–≤–Ω–∏—Ö –Ω–æ–≤–∏–Ω: {bullish_count}
- –ù–µ–≥–∞—Ç–∏–≤–Ω–∏—Ö –Ω–æ–≤–∏–Ω: {bearish_count}
- –ó–∞–≥–∞–ª–æ–º –Ω–æ–≤–∏–Ω: {len(sentiment_results)}
- –ö–ª—é—á–æ–≤—ñ —Ç–µ–º–∏: {', '.join(context_data['top_news'])}

{INVESTMENT_ADVICE_RULES}"""
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ—Ä–∞–¥–∏ —á–µ—Ä–µ–∑ LLM
        import openai
        client = openai.AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))
        
        try:
            response = await asyncio.wait_for(
                client.chat.completions.create(
                    model="gpt-3.5-turbo",
                    messages=[
                        {"role": "system", "content": advice_prompt},
                        {"role": "user", "content": "–î–∞–π —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω—ñ –ø–æ—Ä–∞–¥–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—Ç–æ—á–Ω–æ—ó —Å–∏—Ç—É–∞—Ü—ñ—ó"}
                    ],
                    temperature=0.3,
                    max_tokens=4096,
                    stream=False
                ),
                timeout=20.0
            )
            
            advice = response.choices[0].message.content.strip()
            advice += "\n\n‚ö†Ô∏è **–î–∏—Å–∫–ª–µ–π–º–µ—Ä:** –¶–µ –Ω–µ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è. –ó–∞–≤–∂–¥–∏ –∫–æ–Ω—Å—É–ª—å—Ç—É–π—Ç–µ—Å—è –∑ –ø—Ä–æ—Ñ–µ—Å—ñ–æ–Ω–∞–ª–∞–º–∏."
            
            await client.close()
            return advice
            
        except Exception as e:
            await client.close()
            return f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–æ—Ä–∞–¥: {str(e)}"
        
    except Exception as e:
        return f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –¥–ª—è —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω–∏—Ö –ø–æ—Ä–∞–¥: {str(e)}"


def handle_general_chat(user_input: str) -> str:
    """–û–±—Ä–æ–±–ª—è—î –∑–∞–≥–∞–ª—å–Ω–µ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è"""
    user_input_lower = user_input.lower()
    
    # –®—É–∫–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å —É –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥—è—Ö
    for key, response in GENERAL_CHAT_RESPONSES.items():
        if key in user_input_lower:
            return response
    
    # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    return """–ü—Ä–∏–≤—ñ—Ç! –Ø MarketAnalyst Agent ü§ñ

–ú–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑:
üîç –ê–Ω–∞–ª—ñ–∑–æ–º —Ä–∏–Ω–∫–æ–≤–∏—Ö –Ω–æ–≤–∏–Ω
üí∞ –¶—ñ–Ω–∞–º–∏ –∞–∫—Ü—ñ–π —Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç  
üìà –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω–∏–º–∏ –ø–æ—Ä–∞–¥–∞–º–∏

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å!"""


@app.get("/")
async def root():
    """–ë–∞–∑–æ–≤–∏–π endpoint –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ API"""
    return {
        "name": "Market Analyst Agent",
        "version": "1.0.0",
        "description": "GenAI –∞–≥–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ä–∏–Ω–∫–æ–≤–æ—ó —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ",
        "endpoints": {
            "POST /run": "–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –∞–Ω–∞–ª—ñ–∑ —Ä–∏–Ω–∫—É",
            "GET /news": "–û—Ç—Ä–∏–º–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏",
            "GET /docs": "API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è"
        }
    }


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)