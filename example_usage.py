"""
–ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è MarketAnalystAgent API –∑ –Ω–æ–≤–∏–º —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–∏–º —Ä–æ—É—Ç–∏–Ω–≥–æ–º
"""
import asyncio
import httpx
import json


async def test_news_endpoint():
    """–¢–µ—Å—Ç—É—î endpoint –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω"""
    print("üîç –¢–µ—Å—Ç—É—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω...")
    
    async with httpx.AsyncClient() as client:
        try:
            response = await client.get("http://localhost:8000/news")
            response.raise_for_status()
            
            news = response.json()
            print(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ {len(news)} –Ω–æ–≤–∏–Ω:")
            
            for i, item in enumerate(news, 1):
                print(f"{i}. {item['title'][:60]}... ({item['source']})")
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")


async def test_intent_detection():
    """–¢–µ—Å—Ç—É—î —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –∑–∞–ø–∏—Ç—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —ñ–Ω—Ç–µ–Ω—Ç-–¥–µ—Ç–µ–∫—Ü—ñ—ó"""
    test_queries = [
        # –ê–Ω–∞–ª—ñ–∑ –Ω–æ–≤–∏–Ω
        "–©–æ —Ç–∞–º –Ω–∞ —Ä–∏–Ω–∫—É?",
        "–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –Ω–æ–≤–∏–Ω–∏",
        "–†–∏–Ω–∫–æ–≤–∞ —Å–∏—Ç—É–∞—Ü—ñ—è",
        
        # –¶—ñ–Ω–∏
        "–°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—î Apple?",
        "–¶—ñ–Ω–∞ TSLA",
        "Bitcoin —Ü—ñ–Ω–∞",
        
        # –Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω—ñ –ø–æ—Ä–∞–¥–∏
        "–ö—É–¥–∏ –≤–∫–ª–∞–¥–∞—Ç–∏ –≥—Ä–æ—à—ñ?",
        "–©–æ –∫—Ä–∞—â–µ –∫—É–ø–∏—Ç–∏?",
        "–Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω—ñ –ø–æ—Ä–∞–¥–∏",
        
        # –ó–∞–≥–∞–ª—å–Ω–µ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è
        "–ü—Ä–∏–≤—ñ—Ç",
        "–î—è–∫—É—é",
        "–Ø–∫ —Å–ø—Ä–∞–≤–∏?",
        
        # Fallback
        "–©–æ —Ä–æ–±–∏—Ç–∏ –∑ –∫–æ—Ç–æ–º?",
        "–ü–æ–≥–æ–¥–∞ —Å—å–æ–≥–æ–¥–Ω—ñ",
    ]
    
    print("\nüß† –¢–µ—Å—Ç—É—î–º–æ —ñ–Ω—Ç–µ–Ω—Ç-–¥–µ—Ç–µ–∫—Ü—ñ—é...")
    
    for i, query in enumerate(test_queries, 1):
        print(f"\n{i}. –ó–∞–ø–∏—Ç: '{query}'")
        
        request_data = {
            "messages": [
                {"role": "user", "content": query}
            ]
        }
        
        try:
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.post(
                    "http://localhost:8000/run",
                    json=request_data,
                    headers={"Content-Type": "application/json"}
                )
                response.raise_for_status()
                
                result = response.json()
                content = result["message"]["content"]
                
                # –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–æ—á–∞—Ç–æ–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                preview = content[:100] + "..." if len(content) > 100 else content
                print(f"   –í—ñ–¥–ø–æ–≤—ñ–¥—å: {preview}")
                
        except Exception as e:
            print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        
        # –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
        await asyncio.sleep(1)


async def test_price_requests():
    """–¢–µ—Å—Ç—É—î –∑–∞–ø–∏—Ç–∏ –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω"""
    price_queries = [
        "–¶—ñ–Ω–∞ Apple",
        "–°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—î GOOGL?", 
        "Tesla –∞–∫—Ü—ñ—è",
        "Bitcoin —Ü—ñ–Ω–∞",
        "Ethereum",
        "MSFT"
    ]
    
    print("\nüí∞ –¢–µ—Å—Ç—É—î–º–æ –∑–∞–ø–∏—Ç–∏ —Ü—ñ–Ω...")
    
    for query in price_queries:
        print(f"\n–ó–∞–ø–∏—Ç: '{query}'")
        
        request_data = {
            "messages": [
                {"role": "user", "content": query}
            ]
        }
        
        try:
            async with httpx.AsyncClient(timeout=20.0) as client:
                response = await client.post(
                    "http://localhost:8000/run",
                    json=request_data,
                    headers={"Content-Type": "application/json"}
                )
                response.raise_for_status()
                
                result = response.json()
                print(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å: {result['message']['content']}")
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")


async def test_investment_advice():
    """–¢–µ—Å—Ç—É—î —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω—ñ –ø–æ—Ä–∞–¥–∏"""
    print("\nüìà –¢–µ—Å—Ç—É—î–º–æ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω—ñ –ø–æ—Ä–∞–¥–∏...")
    
    advice_queries = [
        "–ö—É–¥–∏ –≤–∫–ª–∞–¥–∞—Ç–∏ –≥—Ä–æ—à—ñ —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è?",
        "–©–æ –∫—Ä–∞—â–µ –∫—É–ø–∏—Ç–∏ –∑–∞—Ä–∞–∑?",
        "–î–∞–π —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω—ñ –ø–æ—Ä–∞–¥–∏"
    ]
    
    for query in advice_queries:
        print(f"\n–ó–∞–ø–∏—Ç: '{query}'")
        
        request_data = {
            "messages": [
                {"role": "user", "content": query}
            ]
        }
        
        try:
            async with httpx.AsyncClient(timeout=45.0) as client:
                response = await client.post(
                    "http://localhost:8000/run",
                    json=request_data,
                    headers={"Content-Type": "application/json"}
                )
                response.raise_for_status()
                
                result = response.json()
                content = result["message"]["content"]
                
                # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –ø–æ—Ä–∞–¥
                print("–í—ñ–¥–ø–æ–≤—ñ–¥—å:")
                print("-" * 40)
                print(content)
                print("-" * 40)
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        
        break  # –¢–µ—Å—Ç—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω –∑–∞–ø–∏—Ç, –±–æ —Ü–µ –¥–æ–≤–≥–æ


async def test_entity_recognition():
    """–¢–µ—Å—Ç—É—î —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Å—É—Ç–Ω–æ—Å—Ç–µ–π —Ç–∞ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –¥—ñ–π"""
    test_cases = [
        # –ü—Ä–∞–≤–∏–ª—å–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
        {"query": "–¶—ñ–Ω–∞ Apple", "expected": "AAPL"},
        {"query": "–í–∞—Ä—Ç–æ –∫—É–ø–ª—è—Ç–∏ Tesla?", "expected": "TSLA"},
        {"query": "Bitcoin –Ω–æ–≤–∏–Ω–∏", "expected": "BTCUSD"},
        {"query": "MSFT –∞–∫—Ü—ñ—ó", "expected": "MSFT"},
        {"query": "–©–æ –∑ —î–≤—Ä–æ?", "expected": "EURUSD"},
        
        # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è (edge cases)
        {"query": "Rays trade deadline", "expected": "–Ω–µ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π"},
        {"query": "Apple pie —Ä–µ—Ü–µ–ø—Ç", "expected": "–Ω–µ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π"},
        {"query": "Tesla –º–∞—à–∏–Ω–∞ –∫—É–ø–∏—Ç–∏", "expected": "TSLA –∞–±–æ –Ω–µ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π"},
    ]
    
    print("\nüß† –¢–µ—Å—Ç—É—î–º–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Å—É—Ç–Ω–æ—Å—Ç–µ–π...")
    
    for i, case in enumerate(test_cases, 1):
        print(f"\n{i}. '{case['query']}'")
        print(f"   –û—á—ñ–∫—É—î—Ç—å—Å—è: {case['expected']}")
        
        request_data = {
            "messages": [
                {"role": "user", "content": case['query']}
            ]
        }
        
        try:
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.post(
                    "http://localhost:8000/run",
                    json=request_data,
                    headers={"Content-Type": "application/json"}
                )
                response.raise_for_status()
                
                result = response.json()
                content = result["message"]["content"]
                
                # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                print(f"   –í—ñ–¥–ø–æ–≤—ñ–¥—å: {content[:80]}...")
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤
                if case["expected"] == "–Ω–µ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π":
                    if "–Ω–µ —Å—Ç–æ—Å—É—î—Ç—å—Å—è —Ñ—ñ–Ω–∞–Ω—Å—ñ–≤" in content or "—Å–ø–µ—Ü—ñ–∞–ª—ñ–∑—É—é—Å—è –Ω–∞" in content:
                        print("   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ñ–¥—Ö–∏–ª–∏–≤ –Ω–µ-—Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –∑–∞–ø–∏—Ç")
                    else:
                        print("   ‚ùå –ù–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤ –Ω–µ-—Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –∑–∞–ø–∏—Ç")
                else:
                    if any(symbol in content for symbol in ["$", "USD", "‚Ç¥", "üí∞"]):
                        print("   ‚úÖ –†–æ–∑–ø—ñ–∑–Ω–∞–≤ —è–∫ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –∑–∞–ø–∏—Ç")
                    else:
                        print("   ‚ö†Ô∏è –ù–µ –≤–ø–µ–≤–Ω–µ–Ω–∏–π –≤ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—ñ")
                
        except Exception as e:
            print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        
        await asyncio.sleep(0.5)


async def test_edge_cases():
    """–¢–µ—Å—Ç—É—î edge cases —Ç–∞ non-financial –∑–∞–ø–∏—Ç–∏"""
    edge_cases = [
        "Rays trade deadline baseball",
        "Apple pie recipe cooking",
        "Tesla car price (–Ω–µ –∞–∫—Ü—ñ—è)",
        "Dog training tips",
        "Weather forecast today",
        "Movie recommendations",
        "–Ø–∫ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ Wi-Fi?",
        "Bitcoin –º–∞–π–Ω—ñ–Ω–≥ –¥–æ–º–∞",  # –º–µ–∂–æ–≤–∏–π –≤–∏–ø–∞–¥–æ–∫
    ]
    
    print("\nüö® –¢–µ—Å—Ç—É—î–º–æ edge cases...")
    
    for query in edge_cases:
        print(f"\n–¢–µ—Å—Ç: '{query}'")
        
        request_data = {
            "messages": [
                {"role": "user", "content": query}
            ]
        }
        
        try:
            async with httpx.AsyncClient(timeout=20.0) as client:
                response = await client.post(
                    "http://localhost:8000/run",
                    json=request_data,
                    headers={"Content-Type": "application/json"}
                )
                response.raise_for_status()
                
                result = response.json()
                content = result["message"]["content"]
                
                # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                if "–Ω–µ —Å—Ç–æ—Å—É—î—Ç—å—Å—è —Ñ—ñ–Ω–∞–Ω—Å—ñ–≤" in content or "—Å–ø–µ—Ü—ñ–∞–ª—ñ–∑—É—é—Å—è –Ω–∞" in content:
                    print("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ñ–¥—Ö–∏–ª–∏–≤")
                elif any(symbol in content for symbol in ["$", "üí∞", "üìà", "üìâ"]):
                    print("‚ö†Ô∏è –ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤ —è–∫ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π")
                else:
                    print("‚ùì –ù–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å")
                
                print(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å: {content[:100]}...")
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        
        await asyncio.sleep(0.5)


async def test_langchain_agent():
    """–¢–µ—Å—Ç—É—î –Ω–æ–≤–æ–≥–æ LangChain –∞–≥–µ–Ω—Ç–∞ –∑ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –¥—ñ–π"""
    test_scenarios = [
        {
            "query": "–í–∞—Ä—Ç–æ –∫—É–ø–ª—è—Ç–∏ –∞–∫—Ü—ñ—ó Apple –∑–∞—Ä–∞–∑?",
            "expected_actions": ["get_stock_price", "get_stock_news", "analyze_sentiment"],
            "description": "–ü–æ–≤–Ω–∏–π —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω–∏–π –∞–Ω–∞–ª—ñ–∑"
        },
        {
            "query": "–°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—î Tesla?",
            "expected_actions": ["get_stock_price"],
            "description": "–ü—Ä–æ—Å—Ç–∏–π –∑–∞–ø–∏—Ç —Ü—ñ–Ω–∏"
        },
        {
            "query": "–©–æ —Ç–∞–º –Ω–∞ —Ä–∏–Ω–∫—É —Å—å–æ–≥–æ–¥–Ω—ñ?",
            "expected_actions": ["get_market_summary"],
            "description": "–ó–∞–≥–∞–ª—å–Ω–∏–π –æ–≥–ª—è–¥ —Ä–∏–Ω–∫—É"
        },
        {
            "query": "Bitcoin –≤–ø–∞–≤ —á–∏ –∑—Ä—ñ—Å?",
            "expected_actions": ["get_crypto_price"],
            "description": "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞ —Ü—ñ–Ω–∞"
        }
    ]
    
    print("\nü§ñ –¢–µ—Å—Ç—É—î–º–æ LangChain –∞–≥–µ–Ω—Ç–∞ –∑ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –¥—ñ–π...")
    
    for i, scenario in enumerate(test_scenarios, 1):
        print(f"\n{i}. –°—Ü–µ–Ω–∞—Ä—ñ–π: {scenario['description']}")
        print(f"   –ó–∞–ø–∏—Ç: '{scenario['query']}'")
        print(f"   –û—á—ñ–∫—É–≤–∞–Ω—ñ –¥—ñ—ó: {', '.join(scenario['expected_actions'])}")
        
        request_data = {
            "messages": [
                {"role": "user", "content": scenario['query']}
            ]
        }
        
        start_time = asyncio.get_event_loop().time()
        
        try:
            async with httpx.AsyncClient(timeout=90.0) as client:
                response = await client.post(
                    "http://localhost:8000/run",
                    json=request_data,
                    headers={"Content-Type": "application/json"}
                )
                response.raise_for_status()
                
                result = response.json()
                content = result["message"]["content"]
                
                end_time = asyncio.get_event_loop().time()
                execution_time = end_time - start_time
                
                print(f"   ‚è±Ô∏è –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {execution_time:.2f}—Å")
                print(f"   üìù –í—ñ–¥–ø–æ–≤—ñ–¥—å ({len(content)} —Å–∏–º–≤–æ–ª—ñ–≤):")
                print(f"   {content[:200]}...")
                
                # –ê–Ω–∞–ª—ñ–∑ —è–∫–æ—Å—Ç—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                quality_indicators = []
                if "$" in content:
                    quality_indicators.append("üí∞ –¶—ñ–Ω–∞")
                if any(word in content.lower() for word in ["–Ω–æ–≤–∏–Ω–∏", "news"]):
                    quality_indicators.append("üì∞ –ù–æ–≤–∏–Ω–∏")
                if any(word in content.lower() for word in ["—Ä–µ–∫–æ–º–µ–Ω–¥—É—é", "—Ä–∞–¥–∏—Ç—å", "–≤–∞—Ä—Ç–æ", "–Ω–µ –≤–∞—Ä—Ç–æ"]):
                    quality_indicators.append("üí° –ü–æ—Ä–∞–¥–∏")
                if "–Ω–µ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è" in content.lower() or "–¥–∏—Å–∫–ª–µ–π–º–µ—Ä" in content.lower():
                    quality_indicators.append("‚ö†Ô∏è –î–∏—Å–∫–ª–µ–π–º–µ—Ä")
                
                if quality_indicators:
                    print(f"   ‚úÖ –Ø–∫—ñ—Å—Ç—å: {', '.join(quality_indicators)}")
                else:
                    print(f"   ‚ö†Ô∏è –ë–∞–∑–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –±–µ–∑ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤")
                
        except asyncio.TimeoutError:
            print(f"   ‚è∞ –¢–∞–π–º–∞—É—Ç - –∞–≥–µ–Ω—Ç –ø—Ä–∞—Ü—é—î –¥–æ–≤—à–µ 90 —Å–µ–∫—É–Ω–¥")
        except Exception as e:
            print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        
        # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ —Ç–µ—Å—Ç–∞–º–∏
        await asyncio.sleep(2)


async def test_api_info():
    """–¢–µ—Å—Ç—É—î –±–∞–∑–æ–≤–∏–π endpoint –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é"""
    print("\nüìã –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ API...")
    
    async with httpx.AsyncClient() as client:
        try:
            response = await client.get("http://localhost:8000/")
            response.raise_for_status()
            
            info = response.json()
            print("‚úÖ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ API:")
            print(json.dumps(info, indent=2, ensure_ascii=False))
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")


async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ MarketAnalystAgent API v4.0 (LangChain AgentExecutor)")
    print("=" * 70)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get("http://localhost:8000/")
            if response.status_code == 200:
                print("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–Ω–∏–π\n")
            else:
                print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
                return
    except:
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞")
        print("üí° –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è —â–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ: python main.py")
        return
    
    # –ú–µ–Ω—é —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    print("–í–∏–±–µ—Ä—ñ—Ç—å —Ç–µ—Å—Ç –¥–ª—è –∑–∞–ø—É—Å–∫—É:")
    print("1. üîç –ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ API")
    print("2. ü§ñ –¢–µ—Å—Ç LangChain –∞–≥–µ–Ω—Ç–∞ (–ù–û–í–ò–ô!)")
    print("3. üì∞ –¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω")  
    print("4. üß† –¢–µ—Å—Ç —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Å—É—Ç–Ω–æ—Å—Ç–µ–π")
    print("5. üí∞ –¢–µ—Å—Ç –∑–∞–ø–∏—Ç—ñ–≤ —Ü—ñ–Ω (–∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ñ)")
    print("6. üìà –¢–µ—Å—Ç —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ–π–Ω–∏—Ö –ø–æ—Ä–∞–¥ (–ø–æ–≤–Ω–∏–π —Ü–∏–∫–ª)")
    print("7. üö® –¢–µ—Å—Ç edge cases (—Å–ø–æ—Ä—Ç, –Ω–µ-—Ñ—ñ–Ω–∞–Ω—Å–∏)")
    print("8. üöÄ –ü–æ–≤–Ω–∏–π –Ω–∞–±—ñ—Ä —Ç–µ—Å—Ç—ñ–≤")
    print("0. –í–∏—Ö—ñ–¥")
    
    try:
        choice = input("\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ—Å—Ç—É (0-8): ").strip()
        
        if choice == "1":
            await test_api_info()
        elif choice == "2":
            await test_langchain_agent()
        elif choice == "3":
            await test_news_endpoint()
        elif choice == "4":
            await test_entity_recognition()
        elif choice == "5":
            await test_price_requests()
        elif choice == "6":
            await test_investment_advice()
        elif choice == "7":
            await test_edge_cases()
        elif choice == "8":
            print("\nüöÄ –ó–∞–ø—É—Å–∫ –ø–æ–≤–Ω–æ–≥–æ –Ω–∞–±–æ—Ä—É —Ç–µ—Å—Ç—ñ–≤...")
            await test_api_info()
            await test_langchain_agent()
            await test_news_endpoint()
            await test_entity_recognition()
            await test_price_requests()
            await test_investment_advice()
            await test_edge_cases()
        elif choice == "0":
            print("üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
            return
        else:
            print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä")
            return
            
        print("\nüéâ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")


if __name__ == "__main__":
    asyncio.run(main())