"""
–ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è MarketAnalystAgent API
"""
import asyncio
import httpx
import json


async def test_news_endpoint():
    """–¢–µ—Å—Ç—É—î endpoint –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω"""
    print("üîç –¢–µ—Å—Ç—É—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω...")
    
    async with httpx.AsyncClient() as client:
        try:
            response = await client.get("http://localhost:8000/news")
            response.raise_for_status()
            
            news = response.json()
            print(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ {len(news)} –Ω–æ–≤–∏–Ω:")
            
            for i, item in enumerate(news, 1):
                print(f"{i}. {item['title'][:60]}... ({item['source']})")
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")


async def test_run_endpoint():
    """–¢–µ—Å—Ç—É—î –æ—Å–Ω–æ–≤–Ω–∏–π endpoint –∞–Ω–∞–ª—ñ–∑—É"""
    print("\nüöÄ –¢–µ—Å—Ç—É—î–º–æ –∞–Ω–∞–ª—ñ–∑ —Ä–∏–Ω–∫—É...")
    
    request_data = {
        "messages": [
            {"role": "user", "content": "–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –æ—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏ —Ä–∏–Ω–∫—É"}
        ]
    }
    
    async with httpx.AsyncClient(timeout=60.0) as client:
        try:
            response = await client.post(
                "http://localhost:8000/run",
                json=request_data,
                headers={"Content-Type": "application/json"}
            )
            response.raise_for_status()
            
            result = response.json()
            print("‚úÖ –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:")
            print("-" * 50)
            print(result["message"]["content"])
            print("-" * 50)
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")


async def test_api_info():
    """–¢–µ—Å—Ç—É—î –±–∞–∑–æ–≤–∏–π endpoint –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é"""
    print("\nüìã –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ API...")
    
    async with httpx.AsyncClient() as client:
        try:
            response = await client.get("http://localhost:8000/")
            response.raise_for_status()
            
            info = response.json()
            print("‚úÖ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ API:")
            print(json.dumps(info, indent=2, ensure_ascii=False))
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")


async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤ MarketAnalystAgent API")
    print("=" * 60)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get("http://localhost:8000/")
            if response.status_code == 200:
                print("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–Ω–∏–π\n")
            else:
                print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
                return
    except:
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞")
        print("üí° –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è —â–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ: python main.py")
        return
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç–∏
    await test_api_info()
    await test_news_endpoint()
    await test_run_endpoint()
    
    print("\nüéâ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    asyncio.run(main())