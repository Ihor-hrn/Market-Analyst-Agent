"""
LangChain Tools –¥–ª—è MarketAnalystAgent –∑ –ø–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–∏–º –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –¥—ñ–π
"""
import os
import asyncio
import httpx
from typing import Type
from langchain_core.tools import BaseTool
from pydantic import BaseModel, Field
from dotenv import load_dotenv

load_dotenv()

# ---------- STOCK PRICE ----------
class GetStockPriceInput(BaseModel):
    symbol: str = Field(description="Stock ticker symbol (e.g., AAPL, TSLA, GOOGL)")

class GetStockPriceTool(BaseTool):
    name: str = "get_stock_price"
    description: str = "–û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É –∞–∫—Ü—ñ—ó —á–µ—Ä–µ–∑ Twelve Data API."
    args_schema: Type[BaseModel] = GetStockPriceInput

    def _run(self, symbol: str) -> str:
        return asyncio.run(self._arun(symbol))

    async def _arun(self, symbol: str) -> str:
        api_key = os.getenv("TWELVE_DATA_API_KEY")
        if not api_key:
            return "‚ùå API –∫–ª—é—á Twelve Data –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π"
        
        url = "https://api.twelvedata.com/price"
        params = {
            "symbol": symbol.upper(),
            "apikey": api_key
        }

        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                r = await client.get(url, params=params)
                r.raise_for_status()
                data = r.json()
                
                if "price" in data:
                    price = float(data["price"])
                    return f"üí∞ {symbol.upper()}: ${price:.2f}"
                else:
                    return f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ü—ñ–Ω—É –¥–ª—è {symbol}. –ü–æ–º–∏–ª–∫–∞: {data.get('message', 'Unknown error')}"
        except Exception as e:
            return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ {symbol}: {str(e)}"


# ---------- CRYPTO ----------
class GetCryptoPriceInput(BaseModel):
    symbol: str = Field(description="Crypto symbol (e.g., BTCUSD, ETHUSD)")

class GetCryptoPriceTool(BaseTool):
    name: str = "get_crypto_price"
    description: str = "–û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏ —á–µ—Ä–µ–∑ Twelve Data API."
    args_schema: Type[BaseModel] = GetCryptoPriceInput

    def _run(self, symbol: str) -> str:
        return asyncio.run(self._arun(symbol))

    async def _arun(self, symbol: str) -> str:
        api_key = os.getenv("TWELVE_DATA_API_KEY")
        if not api_key:
            return "‚ùå API –∫–ª—é—á Twelve Data –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π"
        
        # Twelve Data –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ñ–æ—Ä–º–∞—Ç BTC/USD –∑–∞–º—ñ—Å—Ç—å BTCUSD
        if symbol.upper().endswith("USD") and len(symbol) > 3:
            crypto_base = symbol.upper()[:-3]
            formatted_symbol = f"{crypto_base}/USD"
        else:
            formatted_symbol = symbol.upper()
        
        url = "https://api.twelvedata.com/price"
        params = {
            "symbol": formatted_symbol,
            "apikey": api_key
        }

        try:
            async with httpx.AsyncClient(timeout=10.0) as client:
                r = await client.get(url, params=params)
                r.raise_for_status()
                data = r.json()
                
                if "price" in data:
                    price = float(data["price"])
                    return f"üí∞ {formatted_symbol}: ${price:,.2f}"
                else:
                    return f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ü—ñ–Ω—É –¥–ª—è {symbol}. –ü–æ–º–∏–ª–∫–∞: {data.get('message', 'Unknown error')}"
        except Exception as e:
            return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ {symbol}: {str(e)}"


# ---------- NEWS BY COMPANY ----------
class GetStockNewsInput(BaseModel):
    query: str = Field(description="–ù–∞–∑–≤–∞ –∫–æ–º–ø–∞–Ω—ñ—ó –∞–±–æ —Ç–∏–∫–µ—Ä")
    limit: int = Field(default=3, description="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–æ–≤–∏–Ω")

class GetStockNewsTool(BaseTool):
    name: str = "get_stock_news"
    description: str = "–ü–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–Ω–∏ –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –∫–æ–º–ø–∞–Ω—ñ—é —á–µ—Ä–µ–∑ NewsData.io"
    args_schema: Type[BaseModel] = GetStockNewsInput

    def _run(self, query: str, limit: int = 3) -> str:
        return asyncio.run(self._arun(query, limit))

    async def _arun(self, query: str, limit: int = 3) -> str:
        api_key = os.getenv("NEWSDATA_API_KEY")
        url = "https://newsdata.io/api/1/news"
        params = {
            "apikey": api_key,
            "q": query,
            "category": "business",
            "language": "en",
            "size": str(min(limit, 5))
        }

        try:
            async with httpx.AsyncClient() as client:
                r = await client.get(url, params=params)
                r.raise_for_status()
                data = r.json()
                articles = data.get("results", [])
                if not articles:
                    return f"üì∞ –ù–µ–º–∞—î –Ω–æ–≤–∏–Ω –ø—Ä–æ {query}"
                return "\n".join([f"{i+1}. {a['title']}" for i, a in enumerate(articles)])
        except Exception as e:
            return f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}"


# ---------- MARKET SUMMARY ----------
class GetMarketSummaryInput(BaseModel):
    category: str = Field(default="business")

class GetMarketSummaryTool(BaseTool):
    name: str = "get_market_summary"
    description: str = "–û–≥–ª—è–¥ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å–∏—Ç—É–∞—Ü—ñ—ó –Ω–∞ —Ä–∏–Ω–∫—É"
    args_schema: Type[BaseModel] = GetMarketSummaryInput

    def _run(self, category: str = "business") -> str:
        return asyncio.run(self._arun(category))

    async def _arun(self, category: str = "business") -> str:
        api_key = os.getenv("NEWSDATA_API_KEY")
        url = "https://newsdata.io/api/1/news"
        params = {
            "apikey": api_key,
            "category": category,
            "q": "market",
            "language": "en",
            "size": "5"
        }

        try:
            async with httpx.AsyncClient() as client:
                r = await client.get(url, params=params)
                r.raise_for_status()
                data = r.json()
                articles = data.get("results", [])
                if not articles:
                    return "üìä –ù–µ–º–∞—î –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö —Ä–∏–Ω–∫–æ–≤–∏—Ö –Ω–æ–≤–∏–Ω"
                return "\n".join([f"{i+1}. {a['title']}" for i, a in enumerate(articles)])
        except Exception as e:
            return f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}"


# ---------- SENTIMENT ----------
class AnalyzeSentimentInput(BaseModel):
    text: str = Field(description="–¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É")

class AnalyzeSentimentTool(BaseTool):
    name: str = "analyze_sentiment"
    description: str = "–ê–Ω–∞–ª—ñ–∑—É—î —Ç–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å —Ç–µ–∫—Å—Ç—É: bullish / bearish / neutral"
    args_schema: Type[BaseModel] = AnalyzeSentimentInput

    def _run(self, text: str) -> str:
        return asyncio.run(self._arun(text))

    async def _arun(self, text: str) -> str:
        try:
            import openai
            client = openai.AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))
            
            response = await client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ç–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å —Ç–µ–∫—Å—Ç—É –¥–ª—è —Ä–∏–Ω–∫—É. –í–∏–∑–Ω–∞—á: bullish (–ø–æ–∑–∏—Ç–∏–≤–Ω–æ), bearish (–Ω–µ–≥–∞—Ç–∏–≤–Ω–æ), neutral (–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ). –î–∞–π –∫–æ—Ä–æ—Ç–∫–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è (1-2 —Ä–µ—á–µ–Ω–Ω—è)."},
                    {"role": "user", "content": text[:1000]}
                ],
                temperature=0,
                max_tokens=200
            )
            
            result = response.choices[0].message.content.strip()
            await client.close()
            return f"üìà **–¢–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å:** {result}"
        except Exception as e:
            return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É: {str(e)}"


# ---------- REGISTER TOOLS ----------
AVAILABLE_TOOLS = [
    GetStockPriceTool(),
    GetCryptoPriceTool(),
    GetStockNewsTool(),
    GetMarketSummaryTool(),
    AnalyzeSentimentTool()
]
